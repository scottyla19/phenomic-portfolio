{"hasPreviousPage":false,"previousPageIsFirst":true,"previous":null,"hasNextPage":true,"next":"MjAxNy0wNS0wOQ==","list":[{"id":"2017-07-06","date":"2017-01-01","title":"React PWA Notes","desc":"Notes while creating my portfolio site. Includes gotchas with service workers, sw-precache, manifext.json.","tags":"React, PWA","author":"Scott LaForest","posted":"07/06/17","body":{"c":[{"c":[{"c":"#","p":{"href":"#notes","className":"phenomic-HeadingAnchor"},"t":"a"},"Notes"],"p":{"id":"notes"},"t":"h1"},"\n",{"c":[{"c":"#","p":{"href":"#service-worker-with-react","className":"phenomic-HeadingAnchor"},"t":"a"},"Service Worker with React"],"p":{"id":"service-worker-with-react"},"t":"h2"},"\n",{"c":["I was able to simplify things by using ",{"c":"sw-precache","t":"code"}," for the app shell and adding the optional setting of ",{"c":"runtimeCaching","t":"code"}," for the blog section to use networkFirst."],"t":"p"},"\n",{"c":{"c":"runtimeCaching: [\n  {\n    urlPattern: /\\/blog.*/,\n    handler: \"networkFirst\",\n    options: {\n      cache: {\n        maxEntries: 10,\n        name: \"blog-cache\"\n      }\n    }\n  }\n]\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":["Also had to add some more root globs for precaching as by default was only caching subfolder assets.\n",{"c":"gulpfile.js","t":"code"}],"t":"p"},"\n",{"c":{"c":"staticFileGlobs: [\n  rootDir + \"/**/*.{js,html,css,png,jpg,gif,svg,eot,ttf,woff}\", //gets subfolder assets\n  rootDir + \"/*.{js,html,css,png,jpg,gif,svg,eot,ttf,woff}\" //caches root foler assets\n],\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":["I also had to put the registration for the service-worker in the ",{"c":"componentDidMount()","t":"code"},"  function of the layout component since we only have access to the DOM once the component mounts. We need the DOM to access the ",{"c":"window.navigator","t":"code"}," to register the service worker."],"t":"p"}],"t":"div"},"key":"2017-07-06"},{"id":"2017-06-28","date":"2017-01-01","title":"React-Tac-Toe Notes","desc":"Notes from creating the react tic-tac-toe example from the Facebook tutorial. Includes controlled components, immutability, and how I added the optional upgrades listed at the bottom of the tutorial.","tags":"React","author":"Scott LaForest","posted":"06/28/17","body":{"c":[{"c":[{"c":"#","p":{"href":"#react-tac-toe-notes","className":"phenomic-HeadingAnchor"},"t":"a"},"React-Tac-Toe Notes"],"p":{"id":"react-tac-toe-notes"},"t":"h1"},"\n",{"c":[{"c":"#","p":{"href":"#moving-state-upwards","className":"phenomic-HeadingAnchor"},"t":"a"},"Moving State Upwards"],"p":{"id":"moving-state-upwards"},"t":"h2"},"\n",{"c":["It is best to aggregate data from multiple children in the parent. For example move the data and logic from the square => board => game component. The parent can then pass the state back down via props. This keeps the state consistent throughout the components.\n.\nSquare no longer keeps its own state; it receives its value from its parent Board and informs its parent when it's clicked. We call components like this ",{"c":"controlled components","t":"strong"},"."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#why-immutability-is-important","className":"phenomic-HeadingAnchor"},"t":"a"},"Why Immutability Is Important"],"p":{"id":"why-immutability-is-important"},"t":"h2"},"\n",{"c":"In the previous code example, we suggest using the .slice() operator to copy the squares array prior to making changes and to prevent mutating the existing array. Let's talk about what this means and why it is an important concept to learn.","t":"p"},"\n",{"c":"There are generally two ways for changing data. The first method is to mutate the data by directly changing the values of a variable. The second method is to replace the data with a new copy of the object that also includes desired changes.","t":"p"},"\n",{"c":"Data change with mutation","t":"p"},"\n",{"c":{"c":"var player = {score: 1, name: 'Jeff'};\nplayer.score = 2;\n// Now player is {score: 2, name: 'Jeff'}\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":"Data change without mutation","t":"p"},"\n",{"c":{"c":"var player = {score: 1, name: 'Jeff'};\n\nvar newPlayer = Object.assign({}, player, {score: 2});\n// Now player is unchanged, but newPlayer is {score: 2, name: 'Jeff'}\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":"The end result is the same but by not mutating (or changing the underlying data) directly we now have an added benefit that can help us increase component and overall application performance.","t":"p"},"\n",{"c":[{"c":"Easier Undo/Redo and Time Travel","t":"strong"},"\nImmutability also makes some complex features much easier to implement. Avoiding data mutations lets us keep a reference to older versions of the data, and switch between them if we need to."],"t":"p"},"\n",{"c":[{"c":"Tracking Changes","t":"strong"},"\nDetermining if a mutated object has changed is complex because changes are made directly to the object. This then requires comparing the current object to a previous copy, traversing the entire object tree, and comparing each variable and value. This process can become increasingly complex."],"t":"p"},"\n",{"c":"Determining how an immutable object has changed is considerably easier. If the object being referenced is different from before, then the object has changed. That's it.","t":"p"},"\n",{"c":[{"c":"Determining When to Re-render in React","t":"strong"},"\nThe biggest benefit of immutability in React comes when you build simple pure components. Since immutable data can more easily determine if changes have been made it also helps to determine when a component requires being re-rendered."],"t":"p"},"\n",{"c":["We've removed the constructor, and in fact, React supports a simpler syntax called ",{"c":"functional components for component types like Square that only consist of a render method","t":"strong"},"."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#how-i-bold-ed-the-currently-selected-move","className":"phenomic-HeadingAnchor"},"t":"a"},"How I ",{"c":"bold","t":"strong"}," ed the currently selected move"],"p":{"id":"how-i-bold-ed-the-currently-selected-move"},"t":"h2"},"\n",{"c":["\n",{"c":["Added a ",{"c":"selectedMove","t":"code"}," property in ",{"c":"this.state","t":"code"}," in the constructor"],"t":"li"},"\n",{"c":["Added ",{"c":"selectedMove: history.length","t":"code"}," in the ",{"c":"handleClick()","t":"code"}," function to make sure when a new move is added it becomes bold"],"t":"li"},"\n",{"c":["added the following line in the ",{"c":"this.setState({})","t":"code"},"call in the  ",{"c":"jumpTo(step)","t":"code"}," function ",{"c":"selectedMove : step","t":"code"},";"],"t":"li"},"\n",{"c":["changed the game ",{"c":"render()","t":"code"}," function to include"],"t":"li"},"\n"],"t":"ol"},"\n",{"c":{"c":"var liStyle = {\n    fontWeight: \"normal\"\n};\nif (this.state.selectedMove === move) {\n    liStyle[\"fontWeight\"] = \"bold\";\n}\nreturn (\n    <li key={move}>\n      <a href=\"#\" style={liStyle} onClick={() => this.jumpTo(move)}>\n        {desc}\n      </a>\n    </li>\n);\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":[{"c":"#","p":{"href":"#how-i-did-a-nested-loop-in-jsx","className":"phenomic-HeadingAnchor"},"t":"a"},"How I did a nested loop in jsx"],"p":{"id":"how-i-did-a-nested-loop-in-jsx"},"t":"h2"},"\n",{"c":{"c":"{Array.apply(null, Array(3)).map(function(item, i) {\n  return (\n    <div className=\"board-row\">\n      {Array.apply(null, Array(3)).map(function(item, j) {\n        return this.renderSquare(i * 3 + j);\n      }, this)}\n    </div>\n  );\n}, this)}\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":[{"c":"#","p":{"href":"#how-i-highlighted-the-winning-moves","className":"phenomic-HeadingAnchor"},"t":"a"},"How I highlighted the winning moves"],"p":{"id":"how-i-highlighted-the-winning-moves"},"t":"h2"},"\n",{"c":["\n",{"c":["\n",{"c":["Had ",{"c":"calculateWinner()","t":"code"}," function return the value ",{"c":"square[a]","t":"code"}," for each winning move as well as the index of the winning squares ",{"c":"lines[i]","t":"code"},"."],"t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":["Added props to keep track of which squares were winning moves from ",{"c":"calculateWinner","t":"code"},". Passed them to the board constructor which then passed those props to each square."],"t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":"Conditionally set the style of each square based on the props of each square being a winner or not.\nMy square component now looks like this:","t":"p"},"\n"],"t":"li"},"\n"],"t":"ol"},"\n",{"c":{"c":"function Square(props) {\n  let myStyle;\n  if (props.isWinner && props.isWinner.includes(props.squareNum)) {\n    myStyle = {\n      color: \"#00d8ff\"\n    };\n  } else {\n    myStyle = { color: \"black\" };\n  }\n  return (\n    <button className=\"square\" onClick={props.onClick} style={myStyle}>\n      {props.value}\n    </button>\n  );\n}\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"}],"t":"div"},"key":"2017-06-28"},{"id":"2017-06-10","date":"2017-01-01","title":"Learn with LaForest Notes","desc":"Notes from my development of my classroom website. Includes service worker, CORS, and firebase gotchas.","tags":"firebase, service-worker","author":"Scott LaForest","posted":"06/10/17","body":{"c":[{"c":[{"c":"#","p":{"href":"#learn-with-laforest","className":"phenomic-HeadingAnchor"},"t":"a"},"Learn with LaForest"],"p":{"id":"learn-with-laforest"},"t":"h1"},"\n",{"c":["This repository is my first attempt at a progressive web app. This app is my classroom website (I currently teach high school math and engineering). The app is hosted on firebase, ",{"c":"Learn with LaForest","p":{"href":"https://learn-with-laforest.firebaseapp.com/"},"t":"a"},", for the ease of deployment and data storage as well as PWA requirements of HTTP/2 and HTTPS default on firebase."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#trials-and-triumphs","className":"phenomic-HeadingAnchor"},"t":"a"},"Trials and Triumphs"],"p":{"id":"trials-and-triumphs"},"t":"h1"},"\n",{"c":["\n",{"c":["Implementing switching between classes via the menu button was my first challenge as I had a hard time getting the ",{"c":"addEventListener()","t":"code"}," method to work correctly and pass the ",{"c":"this","t":"code"}," value as well as a parameter. After researching more on the ",{"c":"bind()","t":"code"}," method I realized that I can add args after the ",{"c":"this","t":"code"}," parameter which will be prepended to the bound method. So for each menu item I passed the corresponding class name after the ",{"c":"this","t":"code"}," parameter.  Example"],"t":"li"},"\n"],"t":"ul"},"\n",{"c":{"c":" this.showAlg1 = document.getElementById('showAlg1')\n this.showAlg1.addEventListener('click', this.clickedOn.bind(this, \"Alg1\"));\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":["\n",{"c":["Service-worker: CDNs at getmdl.io are not CORS supported. So I had to manually fetch them and then cache them thanks to the answer here by Jeff Posnick on ",{"c":"StackOverflow","p":{"href":"https://stackoverflow.com/questions/39109789/what-limitations-apply-to-opaque-responses/39109790#39109790"},"t":"a"},".\nExample"],"t":"li"},"\n"],"t":"ul"},"\n",{"c":{"c":"const request = new Request('https://code.getmdl.io/1.3.0/material.deep_purple-yellow.min.css', {mode: 'no-cors'});\nfetch(request).then(response => cache.put(request, response));\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":["\n",{"c":["\n",{"c":["Firebase DB- TIL that firebase saves data locally on all firebase clients ",{"c":"Firebase offline","p":{"href":"https://firebase.google.com/docs/database/web/read-and-write#write_data_offline"},"t":"a"}," . I was going to make a fetch then cache fetch event for the firebase databas url but this default functionality seems to work fine for offline."],"t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":"Struggling getting firebase messagine working with topics. First was using API key instead of SERVER_KEY which led to 401 responses. And also needed to prepend key= in the request header for the google iid api. Still receiving empty object for response on checking current topics.","t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":["In order to show admin link only to admin (me) I created a child in the firebase db of ",{"c":"isAdmin","t":"code"},". The isAdmin child has children nodes for eadh admin id. I can then check the signed in user's id against the database."],"t":"p"},"\n",{"c":{"c":"this.database.ref('/isAdmin/').once('value').then(function(snapshot) {\n  snapshot.forEach(function(childSnapshot) {\n        if (childSnapshot.key.replace(/\\\"/g, \"\") === userId) {\n          console.log(\"isAdmin\");\n          document.getElementById('showAdmin').removeAttribute(\"hidden\");\n        }\n        else{\n          document.getElementById('showAdmin').setAttribute('hidden', 'true');\n        }\n    });\n});\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n"],"t":"li"},"\n"],"t":"ul"}],"t":"div"},"key":"2017-06-10"},{"id":"2017-06-08","date":"2017-01-01","title":"You Don't Know JS Part 6","desc":"Notes on the sixth day of reading through You Don't Know JS. Includes object creation.","tags":"YDKJS","author":"Scott LaForest","posted":"06/08/17","body":{"c":[{"c":["All examples and notes are taken from the excellent and free to ",{"c":"read (online)","p":{"href":"https://github.com/getify/You-Dont-Know-JS"},"t":"a"}," series of books titled ",{"c":"You Don't Know JS","t":"em"}," by Kyle Simpson."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#objects","className":"phenomic-HeadingAnchor"},"t":"a"},"Objects"],"p":{"id":"objects"},"t":"h3"},"\n",{"c":["The literal syntax for an object looks like this: ",{"c":"more popular","t":"strong"}],"t":"p"},"\n",{"c":{"c":"var myObj = {\n    key: value\n    // ...\n};\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":"The constructed form looks like this:","t":"p"},"\n",{"c":{"c":"var myObj = new Object();\nmyObj.key = value;\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"}],"t":"div"},"key":"2017-06-08"},{"id":"2017-06-06","date":"2017-01-01","title":"You Don't Know JS Part 5","desc":"Notes on the fifth day of reading through You Don't Know JS. Includes more on closure, more on modules, and a lot on this.","tags":"YDKJS","author":"Scott LaForest","posted":"06/06/17","body":{"c":[{"c":["All examples and notes are taken from the excellent and free to ",{"c":"read (online)","p":{"href":"https://github.com/getify/You-Dont-Know-JS"},"t":"a"}," series of books titled ",{"c":"You Don't Know JS","t":"em"}," by Kyle Simpson."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#6617","className":"phenomic-HeadingAnchor"},"t":"a"},"6/6/17"],"p":{"id":"6617"},"t":"h2"},"\n",{"c":[{"c":"#","p":{"href":"#more-on-closure","className":"phenomic-HeadingAnchor"},"t":"a"},"More on Closure"],"p":{"id":"more-on-closure"},"t":"h3"},"\n",{"c":"Closure is when a function is able to remember and access its lexical scope even when that function is executing outside its lexical scope.","t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#more-on-modules","className":"phenomic-HeadingAnchor"},"t":"a"},"More on Modules"],"p":{"id":"more-on-modules"},"t":"h3"},"\n",{"c":["Below is an example of a \"Revealing Module\". Requirements for modules:\n1. It is just a function and must be invoked for every instance. ",{"c":"There must be an outer enclosing function, and it must be invoked at least once (each time creates a new module instance).","t":"em"},"\n2. Returns an object ",{"c":"{key:value,...}","t":"code"}," with access to the 'public' functions but not the inner 'private' variables. Performs like a public API. ",{"c":"The enclosing function must return back at least one inner function, so that this inner function has closure over the private scope, and can access and/or modify that private state.","t":"em"}],"t":"p"},"\n",{"c":{"c":"    var something = \"cool\";\n    var another = [1, 2, 3];\n\n    function doSomething() {\n        console.log( something );\n    }\n\n    function doAnother() {\n        console.log( another.join( \" ! \" ) );\n    }\n\n    return {\n        doSomething: doSomething,\n        doAnother: doAnother\n    };\n}\n\nvar foo = CoolModule();\n\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1 ! 2 ! 3\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":"Turn the function into an IIFE to create singleton objects.","t":"p"},"\n",{"c":{"c":"var foo = (function CoolModule() {\n    var something = \"cool\";\n    var another = [1, 2, 3];\n\n    function doSomething() {\n        console.log( something );\n    }\n\n    function doAnother() {\n        console.log( another.join( \" ! \" ) );\n    }\n\n    return {\n        doSomething: doSomething,\n        doAnother: doAnother\n    };\n})();\n\nfoo.doSomething(); // cool\nfoo.doAnother(); // 1 ! 2 ! 3\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":[{"c":"#","p":{"href":"#this","className":"phenomic-HeadingAnchor"},"t":"a"},"this"],"p":{"id":"this"},"t":"h3"},"\n",{"c":[" ",{"c":[{"c":"this","t":"code"}," is neither a reference to the function itself, nor is it a reference to the function's lexical scope"],"t":"strong"},"."],"t":"p"},"\n",{"c":[{"c":"this","t":"code"}," is actually a binding that is made when a function is invoked, and what it ",{"c":"references is determined entirely by the call-site where the function is called.","t":"strong"}],"t":"p"},"\n",{"c":{"c":"function baz() {\n    // call-stack is: `baz`\n    // so, our call-site is in the global scope\n\n    console.log( \"baz\" );\n    bar(); // <-- call-site for `bar`\n}\n\nfunction bar() {\n    // call-stack is: `baz` -> `bar`\n    // so, our call-site is in `baz`\n\n    console.log( \"bar\" );\n    foo(); // <-- call-site for `foo`\n}\n\nfunction foo() {\n    // call-stack is: `baz` -> `bar` -> `foo`\n    // so, our call-site is in `bar`\n\n    console.log( \"foo\" );\n}\n\nbaz(); // <-- call-site for `baz`\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":"Take care when analyzing code to find the actual call-site (from the call-stack), because it's the only thing that matters for this binding.","t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#this-binding-rules","className":"phenomic-HeadingAnchor"},"t":"a"},"this Binding rules"],"p":{"id":"this-binding-rules"},"t":"h3"},"\n",{"c":["\n",{"c":["\n",{"c":"Default Binding: The default rule when all others do not apply.","t":"p"},"\n",{"c":{"c":"function foo() {\n            console.log( this.a );\n}\n\nvar a = 2;\n\nfoo(); // 2\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":["Notice when ",{"c":"foo()","t":"code"}," is called, ",{"c":"this.a","t":"code"}," resolves to our global variable a. Why? Because in this case, the default binding for ",{"c":"this","t":"code"}," applies to the function call, and so points ",{"c":"this","t":"code"}," at the global object."],"t":"p"},"\n",{"c":["If ",{"c":"strict","t":"code"}," mode is in effect, the global object is not eligible for the default binding, so the ",{"c":"this","t":"code"}," is instead set to undefined."],"t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":"Implicit Binding (Left of the dot): Does the call-site have a context object, also referred to as an owning or containing object.","t":"p"},"\n",{"c":{"c":"function foo() {\n    console.log( this.a );\n}\n\nvar obj = {\n    a: 2,\n    foo: foo\n};\n\nobj.foo(); // 2\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":["The call-site uses the ",{"c":"obj","t":"code"}," context to reference the function, so you could say that the ",{"c":"obj","t":"code"}," object \"owns\" or \"contains\" the function reference at the time the function is called."],"t":"p"},"\n",{"c":["Because ",{"c":"obj","t":"code"}," is the ",{"c":"this","t":"code"}," for the ",{"c":"foo()","t":"code"}," call, ",{"c":"this.a","t":"code"}," is synonymous with obj.a."],"t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":["Explicit Binding: Directly stating what the ",{"c":"this","t":"code"}," should be using either ",{"c":"call()","t":"code"},", ",{"c":"apply()","t":"code"},", or even ",{"c":"bind()","t":"code"},"."],"t":"p"},"\n",{"c":[{"c":"bind()","t":"code"}," returns a function which will act like the original function but with ",{"c":"this","t":"code"}," predefined. It is usually used when you want to pass a function to an event handler or other async callback."],"t":"p"},"\n",{"c":[{"c":"call()","t":"code"}," and ",{"c":"apply()","t":"code"}," will call a function immediately letting you specify both the value of ",{"c":"this","t":"code"}," and any arguments the function will receive. Difference between ",{"c":"call()","t":"code"}," and ",{"c":"apply()","t":"code"}," is both accept additional parameters but ",{"c":"call()","t":"code"}," must specify each additional parameter separated by a comma. Whereas ",{"c":"apply()","t":"code"}," can pass in an array of additional parameters."],"t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":["New Binding: Using the ",{"c":"new","t":"code"}," operator when creating a new variable. This does four things:"],"t":"p"},"\n",{"c":["\n",{"c":"Creates a brand new object (aka, constructed) out of thin air","t":"li"},"\n",{"c":["The newly constructed object is [","[","Prototype","]","]-linked"],"t":"li"},"\n",{"c":["The newly constructed object is set as the ",{"c":"this","t":"code"}," binding for that function call"],"t":"li"},"\n",{"c":"Unless the function returns its own alternate object, the new-invoked function call will automatically return the newly constructed object.","t":"li"},"\n"],"t":"ol"},"\n"],"t":"li"},"\n"],"t":"ol"},"\n",{"c":{"c":"    function foo(a) {\n        this.a = a;\n    }\n\n    var bar = new foo( 2 );\n    console.log( bar.a ); // 2\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":[{"c":"#","p":{"href":"#determining-this","className":"phenomic-HeadingAnchor"},"t":"a"},"Determining this"],"p":{"id":"determining-this"},"t":"h3"},"\n",{"c":["\n",{"c":["\n",{"c":"Is the function called with new (new binding)? If so, this is the newly constructed object.","t":"p"},"\n",{"c":{"c":"var bar = new foo()","t":"code"},"t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":["Is the function called with ",{"c":"call","t":"code"}," or ",{"c":"apply","t":"code"}," (explicit binding), even hidden inside a ",{"c":"bind","t":"code"}," hard binding? If so, ",{"c":"this","t":"code"}," is the explicitly specified object."],"t":"p"},"\n",{"c":{"c":"var bar = foo.call( obj2 )","t":"code"},"t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":["Is the function called with a context (implicit binding), otherwise known as an owning or containing object? If so, ",{"c":"this","t":"code"}," is that context object."],"t":"p"},"\n",{"c":{"c":"var bar = obj1.foo()","t":"code"},"t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":["Otherwise, default the ",{"c":"this","t":"code"}," (default binding). If in ",{"c":"strict mode","t":"code"},", pick undefined, otherwise pick the global object."],"t":"p"},"\n",{"c":{"c":"var bar = foo()","t":"code"},"t":"p"},"\n"],"t":"li"},"\n"],"t":"ol"}],"t":"div"},"key":"2017-06-06"},{"id":"2017-06-05","date":"2017-01-01","title":"You Don't Know JS Part 4","desc":"Notes on the fourth day of reading through You Don't Know JS. Includes strict mode, scope, and let.","tags":"YDKJS","author":"Scott LaForest","posted":"06/05/17","body":{"c":[{"c":["All examples and notes are taken from the excellent and free to ",{"c":"read (online)","p":{"href":"https://github.com/getify/You-Dont-Know-JS"},"t":"a"}," series of books titled ",{"c":"You Don't Know JS","t":"em"}," by Kyle Simpson."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#6517","className":"phenomic-HeadingAnchor"},"t":"a"},"6/5/17"],"p":{"id":"6517"},"t":"h2"},"\n",{"c":[{"c":"#","p":{"href":"#scope","className":"phenomic-HeadingAnchor"},"t":"a"},"Scope"],"p":{"id":"scope"},"t":"h3"},"\n",{"c":[{"c":"use strict mode","t":"em"}," it seems safer ",{"c":"use strict","t":"code"}," it avoids the auto creation of a new variable in the global scope."],"t":"p"},"\n",{"c":[{"c":"ReferenceError","t":"code"}," is Scope resolution-failure related, whereas ",{"c":"TypeError","t":"code"}," implies that Scope resolution was successful, but that there was an illegal/impossible action attempted against the result."],"t":"p"},"\n",{"c":{"c":"Scope look-up stops once it finds the first match.","t":"strong"},"t":"p"},"\n",{"c":{"c":"function foo(a) {\n    var b = 2;\n\n    // some code\n\n    function bar() {\n        // ...\n    }\n\n    // more code\n\n    var c = 3;\n}\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":["Because ",{"c":"a","t":"code"},", ",{"c":"b","t":"code"},", ",{"c":"c","t":"code"},", and ",{"c":"bar","t":"code"}," all belong to the scope bubble of ",{"c":"foo(..)","t":"code"},", they are not accessible outside of ",{"c":"foo(..)","t":"code"},"."],"t":"p"},"\n",{"c":"However, all these identifiers (a, b, c, foo, and bar) are accessible inside of foo(..), and indeed also available inside of bar(..) (assuming there are no shadow identifier declarations inside bar(..)).","t":"p"},"\n",{"c":[{"c":"Do not use anonymous functions","t":"strong"}," i.e. ",{"c":"function(){...}","t":"code"}," instead use:"],"t":"p"},"\n",{"c":[{"c":"Inline function expressions","t":"strong"}," ",{"c":"function name(){...}","t":"code"},"are powerful and useful -- the question of anonymous vs. named doesn't detract from that. Providing a name for your function expression quite effectively addresses all these draw-backs, but has no tangible downsides. The best practice is to always name your function expressions:"],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#let","className":"phenomic-HeadingAnchor"},"t":"a"},"let"],"p":{"id":"let"},"t":"h3"},"\n",{"c":"i.e. block scoping like most other languages.","t":"p"},"\n",{"c":["The ",{"c":"let","t":"code"}," keyword attaches the variable declaration to the scope of whatever block (commonly a { .. } pair) it's contained in. In other words, ",{"c":"let","t":"code"}," implicitly hijacks any block's scope for its variable declaration."],"t":"p"}],"t":"div"},"key":"2017-06-05"},{"id":"2017-06-02","date":"2017-01-01","title":"You Don't Know JS Part 3","desc":"Notes on the third day of reading through You Don't Know JS. Includes modules.","tags":"YDKJS","author":"Scott LaForest","posted":"06/02/17","body":{"c":[{"c":["All examples and notes are taken from the excellent and free to ",{"c":"read (online)","p":{"href":"https://github.com/getify/You-Dont-Know-JS"},"t":"a"}," series of books titled ",{"c":"You Don't Know JS","t":"em"}," by Kyle Simpson."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#6217","className":"phenomic-HeadingAnchor"},"t":"a"},"6/2/17"],"p":{"id":"6217"},"t":"h2"},"\n",{"c":[{"c":"#","p":{"href":"#modules","className":"phenomic-HeadingAnchor"},"t":"a"},"Modules"],"p":{"id":"modules"},"t":"h3"},"\n",{"c":{"c":"function User(){\n    var username, password;\n\n    function doLogin(user,pw) {\n        username = user;\n        password = pw;\n\n        // do the rest of the login work\n    }\n\n    var publicAPI = {\n        login: doLogin\n    };\n\n    return publicAPI;\n}\n\n// create a `User` module instance\nvar fred = User();\n\nfred.login( \"fred\", \"12Battery34!\" );\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"}],"t":"div"},"key":"2017-06-02"},{"id":"2017-06-01","date":"2017-01-01","title":"You Don't Know JS Part 2","desc":"Notes on the second day of reading through You Don't Know JS. Includes strict mode, IIFEs, and closure.","tags":"YDKJS","author":"Scott LaForest","posted":"06/01/17","body":{"c":[{"c":["All examples and notes are taken from the excellent and free to ",{"c":"read (online)","p":{"href":"https://github.com/getify/You-Dont-Know-JS"},"t":"a"}," series of books titled ",{"c":"You Don't Know JS","t":"em"}," by Kyle Simpson."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#6117","className":"phenomic-HeadingAnchor"},"t":"a"},"6/1/17"],"p":{"id":"6117"},"t":"h2"},"\n",{"c":[{"c":"#","p":{"href":"#strict-mode","className":"phenomic-HeadingAnchor"},"t":"a"},"Strict Mode"],"p":{"id":"strict-mode"},"t":"h3"},"\n",{"c":[{"c":"\"use strict\"","t":"code"}," starts strict mode (good for tighter rules for code) within the current scope."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#immediately-invoked-function-expressions-iifes","className":"phenomic-HeadingAnchor"},"t":"a"},"Immediately Invoked Function Expressions (IIFEs)"],"p":{"id":"immediately-invoked-function-expressions-iifes"},"t":"h3"},"\n",{"c":["Automatically calls the function without having to call ",{"c":"foo();","t":"code"},"."],"t":"p"},"\n",{"c":{"c":"(function IIFE(){\n    console.log( \"Hello!\" );\n})();\n// \"Hello!\"\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":[{"c":"#","p":{"href":"#closure","className":"phenomic-HeadingAnchor"},"t":"a"},"Closure"],"p":{"id":"closure"},"t":"h3"},"\n",{"c":"Allows functions and variables within a function to stay available after the life of the function.","t":"p"},"\n",{"c":{"c":"function makeAdder(x) {\n    // parameter `x` is an inner variable\n\n    // inner function `add()` uses `x`, so\n    // it has a \"closure\" over it\n    function add(y) {\n        return y + x;\n    };\n\n    return add;\n}\n\n// `plusOne` gets a reference to the inner `add(..)`\n// function with closure over the `x` parameter of\n// the outer `makeAdder(..)`\nvar plusOne = makeAdder( 1 );\n\n// `plusTen` gets a reference to the inner `add(..)`\n// function with closure over the `x` parameter of\n// the outer `makeAdder(..)`\nvar plusTen = makeAdder( 10 );\n\nplusOne( 3 );       // 4  <-- 1 + 3\nplusOne( 41 );      // 42 <-- 1 + 41\n\nplusTen( 13 );      // 23 <-- 10 + 13\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"}],"t":"div"},"key":"2017-06-01"},{"id":"2017-05-31","date":"2017-01-01","title":"You Don't Know JS Part 1","desc":"Notes on the first day of reading through You Don't Know JS. Includes coercion, scope, and variables.","tags":"YDKJS","author":"Scott LaForest","posted":"05/31/17","body":{"c":[{"c":["All examples and notes are taken from the excellent and free to ",{"c":"read (online)","p":{"href":"https://github.com/getify/You-Dont-Know-JS"},"t":"a"}," series of books titled ",{"c":"You Don't Know JS","t":"em"}," by Kyle Simpson."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#53117","className":"phenomic-HeadingAnchor"},"t":"a"},"5/31/17"],"p":{"id":"53117"},"t":"h2"},"\n",{"c":["  ",{"c":"Javascript coercion","t":"strong"}," and the difference between implicit and explicit coercion when converting or comparing values. Loose equals (",{"c":"==","t":"code"},") implicitly coerces a string value to a number value ",{"c":"'99.99' == 99.9","t":"code"},". While strict equals (",{"c":"===","t":"code"},") does not convert types, so types must be the same and equal in strict equals."],"t":"p"},"\n",{"c":["  ",{"c":"Comments","t":"strong"}],"t":"p"},"\n",{"c":["\n",{"c":["\n",{"c":"Code without comments is suboptimal.","t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":"Too many comments (one per line, for example) is probably a sign of poorly written code.","t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":["Comments should explain ",{"c":"why","t":"em"},", not what. They can optionally explain how if that's particularly confusing"],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#scope","className":"phenomic-HeadingAnchor"},"t":"a"},"Scope"],"p":{"id":"scope"},"t":"h3"},"\n",{"c":"In JavaScript, each function gets its own scope. Scope is basically a collection of variables as well as the rules for how those variables are accessed by name. Only code inside that function can access that function's scoped variables.","t":"p"},"\n",{"c":" If one scope is nested inside another, code inside the innermost scope can access variables from either scope.","t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#variables-and-types","className":"phenomic-HeadingAnchor"},"t":"a"},"Variables and Types"],"p":{"id":"variables-and-types"},"t":"h3"},"\n",{"c":" The best and most natural approach is to use arrays for numerically positioned values and use objects for named properties.","t":"p"},"\n",{"c":" The specific list of \"falsy\" values in JavaScript is as follows:","t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":"\"\" (empty string)","t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":"0, -0, NaN (invalid number)","t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":"null, undefined","t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":"false","t":"p"},"\n",{"c":[{"c":"WTF","t":"strong"},"\nFor example, arrays are by default coerced to strings by simply joining all the values with commas (,) in between. You might think that two arrays with the same contents would be == equal, but they're not:"],"t":"p"},"\n",{"c":{"c":"var a = [1,2,3];\nvar b = [1,2,3];\nvar c = \"1,2,3\";\n\na == c;     // true\nb == c;     // true\na == b;     // false\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n"],"t":"li"},"\n"],"t":"ul"}],"t":"div"},"key":"2017-05-31"},{"id":"2017-05-19","date":"2017-01-01","title":"Responsive Design Notes","desc":"Notes from the Google Responsive Design CodeLab. Includes CRUD with object stores, cursors and uses idb library.","tags":"ResponsiveDesign","author":"Scott LaForest","posted":"05/18/17","body":{"c":[{"c":[{"c":"#","p":{"href":"#notes","className":"phenomic-HeadingAnchor"},"t":"a"},"Notes"],"p":{"id":"notes"},"t":"h1"},"\n",{"c":[{"c":"#","p":{"href":"#use-em-units-for","className":"phenomic-HeadingAnchor"},"t":"a"},"Use em Units For:"],"p":{"id":"use-em-units-for"},"t":"h2"},"\n",{"c":"Any sizing that should scale depending on the font-size of an element other than the root.","t":"p"},"\n",{"c":"Generally speaking, the only reason you’ll need to use em units is to scale an element which has non default font sizing.","t":"p"},"\n",{"c":"As per our example above, design components like menu items, buttons, and headings may have their own explicitly stated font sizes. If you change these font sizes, you want the entire component to scale proportionately.","t":"p"},"\n",{"c":"Common properties this guideline will apply to are margin, padding, width, height and line-height settings, when used on elements with non default font sizing.","t":"p"},"\n",{"c":"I recommend that when you do employ em units, the font size of the element they’re used on should be set in rem units to preserve scalability but avoid inheritance confusion.","t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#typically-dont-use-em-units-for-font-sizes","className":"phenomic-HeadingAnchor"},"t":"a"},"Typically Don’t Use em Units for Font Sizes"],"p":{"id":"typically-dont-use-em-units-for-font-sizes"},"t":"h2"},"\n",{"c":"It’s quite common to see em units used for font sizing, particularly in headings, however I would suggest that designs are more manageable if rem units are typically used for font sizing.","t":"p"},"\n",{"c":"The reason headings often use em units is they’re a better choice than px units, being relative to regular text size. However rem units can achieve this goal equally well. If any font size adjustment on the html element is made, the heading sizes will still scale too.","t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#use-rem-units-for","className":"phenomic-HeadingAnchor"},"t":"a"},"Use rem units for:"],"p":{"id":"use-rem-units-for"},"t":"h2"},"\n",{"c":"Any sizing that doesn’t need em units for the reasons described above, and that should scale depending on browser font size settings.","t":"p"},"\n",{"c":"This accounts for almost everything in a standard design including most heights, most widths, most padding, most margins, border widths, most font sizes, shadows, basically almost every part of your layout.","t":"p"},"\n",{"c":"In a nutshell, everything that can be made scalable with rem units, should be.","t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#always-use-rem-media-queries","className":"phenomic-HeadingAnchor"},"t":"a"},"Always Use rem Media Queries"],"p":{"id":"always-use-rem-media-queries"},"t":"h2"},"\n",{"c":"Importantly, when using rem units to create a uniformly scalable design, your media queries should also be in rem units. This will ensure that whatever a user’s browser font size, your media queries will respond to it and adjust your layout.","t":"p"},"\n",{"c":"For example, if a user scales up text very high, your layout may need to snap down from a two columns to a single column, just as it might on a smaller screened mobile device.","t":"p"},"\n",{"c":"If your breakpoints are at fixed pixel widths, only a different viewport size can trigger them. However with rem based breakpoints they will respond to different font sizing too.","t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#dont-use-em-or-rem-for","className":"phenomic-HeadingAnchor"},"t":"a"},"Don’t Use em or rem For:"],"p":{"id":"dont-use-em-or-rem-for"},"t":"h2"},"\n",{"c":"Multi Column Layout Widths","t":"p"},"\n",{"c":"Column widths in a layout should typically be % based so they can fluidly fit unpredictably sized viewports.\nHowever single columns should still generally incorporate rem values via a max-width setting.","t":"p"}],"t":"div"},"key":"2017-05-19"},{"id":"2017-05-18","date":"2017-01-01","title":"Indexed DB Notes","desc":"Notes from the Google IndexedDB CodeLab. Includes CRUD with object stores, cursors and uses idb library.","tags":"IdexedDB","author":"Scott LaForest","posted":"05/18/17","body":{"c":[{"c":[{"c":"#","p":{"href":"#notes","className":"phenomic-HeadingAnchor"},"t":"a"},"Notes"],"p":{"id":"notes"},"t":"h1"},"\n",{"c":[{"c":"#","p":{"href":"#terminology","className":"phenomic-HeadingAnchor"},"t":"a"},"Terminology"],"p":{"id":"terminology"},"t":"h2"},"\n",{"c":["\n",{"c":"Database: contains all of the object stores (same as sql)","t":"li"},"\n",{"c":"Object Store: Similar to tables in sql","t":"li"},"\n",{"c":"Index: A property of an object store that allows for easy search and retrieval.","t":"li"},"\n",{"c":"Operation: An interaction with a databas.","t":"li"},"\n",{"c":"Transaction: A wrapper around an operation that helps keep integrity of a db. If one operation fails, none of the changes are saved and db is unaltered.","t":"li"},"\n",{"c":"Cursor: method for iterating over a multiple records in a db","t":"li"},"\n"],"t":"ul"},"\n",{"c":[{"c":"#","p":{"href":"#working-with-db","className":"phenomic-HeadingAnchor"},"t":"a"},"Working with DB"],"p":{"id":"working-with-db"},"t":"h2"},"\n",{"c":{"c":" DB and create Object Store (OS)","t":"strong"},"t":"p"},"\n",{"c":{"c":"var dbPromise = idb.open('test-db2', 1, function(upgradeDb) {\n   console.log('making a new object store');\n   if (!upgradeDb.objectStoreNames.contains('firstOS')) {\n     upgradeDb.createObjectStore('firstOS');\n   }\n });\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":[" Always check if OS is already created --> ",{"c":"!upgradeDb.objectStoreNames.contains('firstOS')","t":"code"}],"t":"p"},"\n",{"c":[" ",{"c":" Primary Keys","t":"strong"}],"t":"p"},"\n",{"c":" A key path is a property that always exists and contains a unique value. For example, in the case of a \"people\" object store we could choose the email address as the key path.","t":"p"},"\n",{"c":{"c":"upgradeDb.createObjectStore('people', {keyPath: 'email'});","t":"code"},"t":"p"},"\n",{"c":"This example creates an object store called \"people\" and assigns the \"email\" property as the primary key.","t":"p"},"\n",{"c":{"c":"upgradeDb.createObjectStore('notes', {autoIncrement:true});","t":"code"},"t":"p"},"\n",{"c":"This example creates an object store called \"notes\" and sets the primary key to be assigned automatically as an auto incrementing number.","t":"p"},"\n",{"c":{"c":"upgradeDb.createObjectStore('logs', {keyPath: 'id', autoIncrement:true});","t":"code"},"t":"p"},"\n",{"c":"This example is similar to the previous example, but this time the auto incrementing value is assigned to a property called \"id\".","t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#working-with-data","className":"phenomic-HeadingAnchor"},"t":"a"},"Working with data"],"p":{"id":"working-with-data"},"t":"h2"},"\n",{"c":[{"c":"Creating Data","t":"strong"},"\nAll data operations in IndexedDB are carried out inside a transaction. Each operation has this form:"],"t":"p"},"\n",{"c":["\n",{"c":"Get database object","t":"li"},"\n",{"c":"Open transaction on database","t":"li"},"\n",{"c":"Open object store on transaction","t":"li"},"\n",{"c":"Perform operation on object store","t":"li"},"\n"],"t":"ol"},"\n",{"c":{"c":"dbPromise.then(function(db) { ///step 1\n  var tx = db.transaction('store', 'readwrite'); //step 2\n  var store = tx.objectStore('store'); //step 3\n  var item = {\n    name: 'sandwich',\n    price: 4.99,\n    description: 'A very tasty sandwich',\n    created: new Date().getTime()\n  };\n  store.add(item); //step 4\n  return tx.complete;\n}).then(function() {\n  console.log('added item to the store os!');\n});\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":{"c":" Reading Data","t":"strong"},"t":"p"},"\n",{"c":{"c":"dbPromise.then(function(db) { //step 1\n  var tx = db.transaction('store', 'readonly'); //step 2\n  var store = tx.objectStore('store'); //step 3\n  return store.get('sandwich'); //step 4\n}).then(function(val) {\n  console.dir(val);\n});\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":{"c":"Updating Data","t":"strong"},"t":"p"},"\n",{"c":["Similar to creating data except we us the following method\n",{"c":"someObjectStore.put(data, optionalKey);","t":"code"}],"t":"p"},"\n",{"c":{"c":"Deleting Data","t":"strong"},"t":"p"},"\n",{"c":["Similar to creating data except we us the following method\n",{"c":"someObjectStore.delete(primaryKey);","t":"code"}],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#retrieving-data","className":"phenomic-HeadingAnchor"},"t":"a"},"Retrieving Data"],"p":{"id":"retrieving-data"},"t":"h2"},"\n",{"c":{"c":"Get all method","t":"strong"},"t":"p"},"\n",{"c":"Easiest way that returns all objects in optional range (optionalConstraint) and returns array sorted by primary key.","t":"p"},"\n",{"c":{"c":"someObjectStore.getAll(optionalConstraint);","t":"code"},"t":"p"},"\n",{"c":{"c":"dbPromise.then(function(db) {\n  var tx = db.transaction('store', 'readonly');\n  var store = tx.objectStore('store');\n  return store.getAll();\n}).then(function(items) {\n  console.log('Items by name:', items);\n});\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":{"c":"Cursors","t":"strong"},"t":"p"},"\n",{"c":"A cursor selects each object in an object store or index one by one, letting you do something with the data as it is selected.","t":"p"},"\n",{"c":{"c":"dbPromise.then(function(db) {\n  var tx = db.transaction('store', 'readonly');\n  var store = tx.objectStore('store');\n  return store.openCursor();\n}).then(function logItems(cursor) {\n  if (!cursor) {return;}\n  console.log('Cursored at:', cursor.key);\n  for (var field in cursor.value) {\n    console.log(cursor.value[field]);\n  }\n  return cursor.continue().then(logItems);\n}).then(function() {\n  console.log('Done cursoring');\n});\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":{"c":"Note: Remember to close the test page. The database version can't be changed while another page is using the database.","t":"strong"},"t":"p"}],"t":"div"},"key":"2017-05-18"},{"id":"2017-05-09","date":"2017-01-01","title":"PWA Service Worker Notes","desc":"Notes from the Google PWA Service Worker CodeLab. Includes install, activate, and SW scope.","tags":"PWA","author":"Scott LaForest","posted":"05/09/17","body":{"c":[{"c":[{"c":"#","p":{"href":"#notes","className":"phenomic-HeadingAnchor"},"t":"a"},"Notes"],"p":{"id":"notes"},"t":"h1"},"\n",{"c":["\n",{"c":"Service workers must be registered.","t":"li"},"\n",{"c":["Always start by checking if the browser supports service workers. The service\nworker is exposed on the browser's ",{"c":"Navigator","p":{"href":"https://developer.mozilla.org/en-US/docs/Web/API/Navigator"},"t":"a"}," i.e. ",{"c":"window.navigator.serviceWorker","t":"code"}],"t":"li"},"\n"],"t":"ul"},"\n",{"c":[{"c":"#","p":{"href":"#sw-life-cycle","className":"phenomic-HeadingAnchor"},"t":"a"},"SW Life Cycle"],"p":{"id":"sw-life-cycle"},"t":"h1"},"\n",{"c":["\n",{"c":["The service worker emits an ",{"c":"install","t":"code"}," event at the end of registration (this is a good place for caching static assets). SW emits an  ",{"c":"activate","t":"code"}," event when it takes control of the page (is often used to update caches)."],"t":"li"},"\n"],"t":"ul"},"\n",{"c":{"c":"  self.addEventListener('install', function(event) {\n    console.log('Service worker installing...');\n    });\n\n  self.addEventListener('activate', function(event) {\n    console.log('Service worker activating...');\n  });\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":["\n",{"c":["\n",{"c":"fetch events are received for every HTTP request (we could also create and return our own custom response with arbitrary resources).","t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":"Why didn't a failed response activate the catch block? This is an important note for fetch and promises—bad responses (like 404s) still resolve! A fetch promise only rejects if the request was unable to complete, so you must always check the validity of the response.","t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":"Getting headers involves getting a headers object var myHeaders = response.headers then calling the get funciotn on the object. myHeaders.get(name)","t":"p"},"\n"],"t":"li"},"\n"],"t":"ul"},"\n",{"c":{"c":"self.addEventListener('fetch', function(event) {\n    console.log('Fetching:', event.request.url);\n});\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":[{"c":"#","p":{"href":"#sw-scope","className":"phenomic-HeadingAnchor"},"t":"a"},"SW Scope"],"p":{"id":"sw-scope"},"t":"h1"},"\n",{"c":["\n",{"c":["The promise returned by ",{"c":"register()","t":"code"}," resolves to the registration object, which contains the service worker's scope."],"t":"li"},"\n"],"t":"ul"},"\n",{"c":{"c":"The default scope is the path to the service worker file, and extends to all lower directories. So a service worker in the root directory of an app controls requests from all files in the app.","t":"strong"},"t":"p"},"\n",{"c":["\n",{"c":["\n",{"c":["Notice if ",{"c":"service-worker.js","t":"code"}," is in a subdirectory (/below) then the service worker only controls requests for the requests in that subdirectory. The service worker's default scope is the path to the service worker file. Since the service worker file is now in app/below/, that is its scope. The console is now only logging fetch events for another.html, another.css, and another.js, because these are the only resources within the service worker's scope (app/below/)."],"t":"p"},"\n"],"t":"li"},"\n",{"c":["\n",{"c":"Can set an arbitrary scope using the options in serviceWorker.register().","t":"p"},"\n"],"t":"li"},"\n"],"t":"ul"},"\n",{"c":{"c":"navigator.serviceWorker.register('service-worker.js',\n{scope: './below'})\n.then(function(registration) {\n    console.log('Registered at scope:', registration.scope);\n})```\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"}],"t":"div"},"key":"2017-05-09"}]}