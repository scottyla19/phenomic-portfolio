{"date":"2017-01-01","title":"Indexed DB Notes","desc":"Notes from the Google IndexedDB CodeLab. Includes CRUD with object stores, cursors and uses idb library.","tags":"IdexedDB","author":"Scott LaForest","posted":"05/18/17","body":{"c":[{"c":[{"c":"#","p":{"href":"#notes","className":"phenomic-HeadingAnchor"},"t":"a"},"Notes"],"p":{"id":"notes"},"t":"h1"},"\n",{"c":[{"c":"#","p":{"href":"#terminology","className":"phenomic-HeadingAnchor"},"t":"a"},"Terminology"],"p":{"id":"terminology"},"t":"h2"},"\n",{"c":["\n",{"c":"Database: contains all of the object stores (same as sql)","t":"li"},"\n",{"c":"Object Store: Similar to tables in sql","t":"li"},"\n",{"c":"Index: A property of an object store that allows for easy search and retrieval.","t":"li"},"\n",{"c":"Operation: An interaction with a databas.","t":"li"},"\n",{"c":"Transaction: A wrapper around an operation that helps keep integrity of a db. If one operation fails, none of the changes are saved and db is unaltered.","t":"li"},"\n",{"c":"Cursor: method for iterating over a multiple records in a db","t":"li"},"\n"],"t":"ul"},"\n",{"c":[{"c":"#","p":{"href":"#working-with-db","className":"phenomic-HeadingAnchor"},"t":"a"},"Working with DB"],"p":{"id":"working-with-db"},"t":"h2"},"\n",{"c":{"c":" DB and create Object Store (OS)","t":"strong"},"t":"p"},"\n",{"c":{"c":"var dbPromise = idb.open('test-db2', 1, function(upgradeDb) {\n   console.log('making a new object store');\n   if (!upgradeDb.objectStoreNames.contains('firstOS')) {\n     upgradeDb.createObjectStore('firstOS');\n   }\n });\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":[" Always check if OS is already created --> ",{"c":"!upgradeDb.objectStoreNames.contains('firstOS')","t":"code"}],"t":"p"},"\n",{"c":[" ",{"c":" Primary Keys","t":"strong"}],"t":"p"},"\n",{"c":" A key path is a property that always exists and contains a unique value. For example, in the case of a \"people\" object store we could choose the email address as the key path.","t":"p"},"\n",{"c":{"c":"upgradeDb.createObjectStore('people', {keyPath: 'email'});","t":"code"},"t":"p"},"\n",{"c":"This example creates an object store called \"people\" and assigns the \"email\" property as the primary key.","t":"p"},"\n",{"c":{"c":"upgradeDb.createObjectStore('notes', {autoIncrement:true});","t":"code"},"t":"p"},"\n",{"c":"This example creates an object store called \"notes\" and sets the primary key to be assigned automatically as an auto incrementing number.","t":"p"},"\n",{"c":{"c":"upgradeDb.createObjectStore('logs', {keyPath: 'id', autoIncrement:true});","t":"code"},"t":"p"},"\n",{"c":"This example is similar to the previous example, but this time the auto incrementing value is assigned to a property called \"id\".","t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#working-with-data","className":"phenomic-HeadingAnchor"},"t":"a"},"Working with data"],"p":{"id":"working-with-data"},"t":"h2"},"\n",{"c":[{"c":"Creating Data","t":"strong"},"\nAll data operations in IndexedDB are carried out inside a transaction. Each operation has this form:"],"t":"p"},"\n",{"c":["\n",{"c":"Get database object","t":"li"},"\n",{"c":"Open transaction on database","t":"li"},"\n",{"c":"Open object store on transaction","t":"li"},"\n",{"c":"Perform operation on object store","t":"li"},"\n"],"t":"ol"},"\n",{"c":{"c":"dbPromise.then(function(db) { ///step 1\n  var tx = db.transaction('store', 'readwrite'); //step 2\n  var store = tx.objectStore('store'); //step 3\n  var item = {\n    name: 'sandwich',\n    price: 4.99,\n    description: 'A very tasty sandwich',\n    created: new Date().getTime()\n  };\n  store.add(item); //step 4\n  return tx.complete;\n}).then(function() {\n  console.log('added item to the store os!');\n});\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":{"c":" Reading Data","t":"strong"},"t":"p"},"\n",{"c":{"c":"dbPromise.then(function(db) { //step 1\n  var tx = db.transaction('store', 'readonly'); //step 2\n  var store = tx.objectStore('store'); //step 3\n  return store.get('sandwich'); //step 4\n}).then(function(val) {\n  console.dir(val);\n});\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":{"c":"Updating Data","t":"strong"},"t":"p"},"\n",{"c":["Similar to creating data except we us the following method\n",{"c":"someObjectStore.put(data, optionalKey);","t":"code"}],"t":"p"},"\n",{"c":{"c":"Deleting Data","t":"strong"},"t":"p"},"\n",{"c":["Similar to creating data except we us the following method\n",{"c":"someObjectStore.delete(primaryKey);","t":"code"}],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#retrieving-data","className":"phenomic-HeadingAnchor"},"t":"a"},"Retrieving Data"],"p":{"id":"retrieving-data"},"t":"h2"},"\n",{"c":{"c":"Get all method","t":"strong"},"t":"p"},"\n",{"c":"Easiest way that returns all objects in optional range (optionalConstraint) and returns array sorted by primary key.","t":"p"},"\n",{"c":{"c":"someObjectStore.getAll(optionalConstraint);","t":"code"},"t":"p"},"\n",{"c":{"c":"dbPromise.then(function(db) {\n  var tx = db.transaction('store', 'readonly');\n  var store = tx.objectStore('store');\n  return store.getAll();\n}).then(function(items) {\n  console.log('Items by name:', items);\n});\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":{"c":"Cursors","t":"strong"},"t":"p"},"\n",{"c":"A cursor selects each object in an object store or index one by one, letting you do something with the data as it is selected.","t":"p"},"\n",{"c":{"c":"dbPromise.then(function(db) {\n  var tx = db.transaction('store', 'readonly');\n  var store = tx.objectStore('store');\n  return store.openCursor();\n}).then(function logItems(cursor) {\n  if (!cursor) {return;}\n  console.log('Cursored at:', cursor.key);\n  for (var field in cursor.value) {\n    console.log(cursor.value[field]);\n  }\n  return cursor.continue().then(logItems);\n}).then(function() {\n  console.log('Done cursoring');\n});\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":{"c":"Note: Remember to close the test page. The database version can't be changed while another page is using the database.","t":"strong"},"t":"p"}],"t":"div"}}