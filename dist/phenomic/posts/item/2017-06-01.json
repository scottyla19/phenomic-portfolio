{"date":"2017-01-01","title":"You Don't Know JS Part 2","desc":"Notes on the second day of reading through You Don't Know JS. Includes strict mode, IIFEs, and closure.","tags":"YDKJS","author":"Scott LaForest","posted":"06/01/17","body":{"c":[{"c":["All examples and notes are taken from the excellent and free to ",{"c":"read (online)","p":{"href":"https://github.com/getify/You-Dont-Know-JS"},"t":"a"}," series of books titled ",{"c":"You Don't Know JS","t":"em"}," by Kyle Simpson."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#6117","className":"phenomic-HeadingAnchor"},"t":"a"},"6/1/17"],"p":{"id":"6117"},"t":"h2"},"\n",{"c":[{"c":"#","p":{"href":"#strict-mode","className":"phenomic-HeadingAnchor"},"t":"a"},"Strict Mode"],"p":{"id":"strict-mode"},"t":"h3"},"\n",{"c":[{"c":"\"use strict\"","t":"code"}," starts strict mode (good for tighter rules for code) within the current scope."],"t":"p"},"\n",{"c":[{"c":"#","p":{"href":"#immediately-invoked-function-expressions-iifes","className":"phenomic-HeadingAnchor"},"t":"a"},"Immediately Invoked Function Expressions (IIFEs)"],"p":{"id":"immediately-invoked-function-expressions-iifes"},"t":"h3"},"\n",{"c":["Automatically calls the function without having to call ",{"c":"foo();","t":"code"},"."],"t":"p"},"\n",{"c":{"c":"(function IIFE(){\n    console.log( \"Hello!\" );\n})();\n// \"Hello!\"\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"},"\n",{"c":[{"c":"#","p":{"href":"#closure","className":"phenomic-HeadingAnchor"},"t":"a"},"Closure"],"p":{"id":"closure"},"t":"h3"},"\n",{"c":"Allows functions and variables within a function to stay available after the life of the function.","t":"p"},"\n",{"c":{"c":"function makeAdder(x) {\n    // parameter `x` is an inner variable\n\n    // inner function `add()` uses `x`, so\n    // it has a \"closure\" over it\n    function add(y) {\n        return y + x;\n    };\n\n    return add;\n}\n\n// `plusOne` gets a reference to the inner `add(..)`\n// function with closure over the `x` parameter of\n// the outer `makeAdder(..)`\nvar plusOne = makeAdder( 1 );\n\n// `plusTen` gets a reference to the inner `add(..)`\n// function with closure over the `x` parameter of\n// the outer `makeAdder(..)`\nvar plusTen = makeAdder( 10 );\n\nplusOne( 3 );       // 4  <-- 1 + 3\nplusOne( 41 );      // 42 <-- 1 + 41\n\nplusTen( 13 );      // 23 <-- 10 + 13\n","p":{"className":"language-javascript"},"t":"code"},"t":"pre"}],"t":"div"}}